
const examplesMap: { [index: string]: string } = {"10 Nums Avg":"DECLARE total INITIALLY 0\nDECLARE count INITIALLY 0\nDECLARE nextInput INITIALLY 0\n\nWHILE count < 10 DO\n  SEND \"Enter number \" & count + 1 & \":\" TO DISPLAY\n  DECLARE input INITIALLY FROM KEYBOARD\n  SET nextInput TO CInt(input)\n\n  SET total TO total + nextInput\n  SET count TO count + 1\nEND WHILE\n\nSEND \"Average of nums: \" & total / 10.0 TO DISPLAY\n","2019 Q1":"CLASS Event IS { STRING date, STRING startTime, STRING venue, BOOLEAN alert, ARRAY OF STRING participants, INTEGER index }\n\n  METHODS\n  \n  CONSTRUCTOR (STRING date, STRING startTime, STRING venue, BOOLEAN alert)\n    DECLARE THIS.date INITIALLY date\n    DECLARE THIS.startTime INITIALLY startTime\n    DECLARE THIS.venue INITIALLY venue\n    DECLARE THIS.alert INITIALLY alert\n    DECLARE THIS.participants INITIALLY [\"\"] * 20\n    DECLARE THIS.index INITIALLY 0\n  END CONSTRUCTOR\n\n  PROCEDURE updateDate(STRING eventDate)\n    SET THIS.date TO eventDate\n  END PROCEDURE\n\n  FUNCTION getDate() RETURNS STRING\n    RETURN THIS.date\n  END FUNCTION\n\n  PROCEDURE addParticipant(STRING name)\n    SET THIS.participants[THIS.index] TO name\n    SET THIS.index TO THIS.index + 1\n  END PROCEDURE\n\nEND CLASS\n\nCLASS Personal INHERITS Event WITH { STRING eventType, STRING description }\n\n  METHODS\n\n  PROCEDURE setEventType(STRING eventType)\n    SET THIS.eventType TO eventType\n  END PROCEDURE\n\n  PROCEDURE setDescription(STRING description)\n    SET THIS.description TO description\n  END PROCEDURE\n\nEND CLASS\n\nDECLARE party INITIALLY Event(\"29/03/2022\", \"19:00\", \"My House\", true)\nDECLARE personal INITIALLY Personal(\"01/04/2022\", \"12:00\", \"Nandos\", false, [\"Freddie\", \"Luke\", \"Sam\"], 0, \"Lunch\", \"Sick lunch with the bros at nandos\")\n\nparty.addParticipant(\"John\")\nparty.addParticipant(\"Adam\")\nparty.addParticipant(\"Matty\")\n\nSEND party & \"\" TO DISPLAY\nSEND personal & \"\" TO DISPLAY","2d Array":"DECLARE rows INITIALLY CInt(Random() * 20 + 1)\nDECLARE cols INITIALLY CInt(Random() * 20 + 1)\n\nDECLARE myArray INITIALLY [ [ CInt(Random() * 10) ] * cols ] * rows\n\nSEND myArray TO DISPLAY","Find Max":"DECLARE nums INITIALLY [ 3, 10, 4, 3, 9, 2, 7, 12, 8 ] * 100\nDECLARE max INITIALLY { index = 0, value = nums[0] }\n\nFOR i FROM 1 TO Length(nums) - 1 DO\n  IF nums[i] > max.value THEN\n    SET max TO { index = i, value = nums[i] }\n  END IF\nEND FOR\n\nSEND \"Max was \" & max.value & \" at position \" & max.index TO DISPLAY","Find Min":"DECLARE nums INITIALLY [ 3, 10, 4, 3, 9, 2, 7, 12, 8 ]\nDECLARE min INITIALLY { index = 0, value = nums[0] }\n\nFOR i FROM 1 TO Length(nums) - 1 DO\n  IF nums[i] < min.value THEN\n    SET min TO { index = i, value = nums[i] }\n  END IF\nEND \n\nSEND \"Min was \" & min.value & \" at position \" & min.index TO DISPLAY","Hello World":"SEND \"Hello World!\" TO DISPLAY\n","Number Guesser":"SEND \"odds?\" TO DISPLAY\nDECLARE input INITIALLY FROM KEYBOARD\nDECLARE odds INITIALLY CInt(input)\n\nSEND \"Guess between 1 and \" & odds TO DISPLAY\n\nDECLARE num INITIALLY CInt(Random() * odds + 1)\nDECLARE guess INITIALLY 0\n\nSEND \"Start guessing!\" TO DISPLAY\n\nWHILE guess â‰  num DO\n  RECEIVE input FROM KEYBOARD\n  SET guess TO CInt(input)\n\n  IF guess < num THEN\n    SEND \"too low\" TO DISPLAY\n  ELSE IF guess > num THEN\n    SEND \"too high\" TO DISPLAY\n  END IF\nEND WHILE\n\nSEND \"Well done!\" TO DISPLAY\n  ","Running Total":"DECLARE total INITIALLY 0\nDECLARE myArray INITIALLY [ 5, 10, 21, 43, 7 ]\n\nFOR EACH num FROM myArray DO\n  SET total TO total + num\nEND FOR EACH\n\nSEND total TO DISPLAY"};
export default examplesMap;